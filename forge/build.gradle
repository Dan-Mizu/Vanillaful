plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = "${rootProject.archives_base_name}-${project.name}"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "vanillaful-common.mixins.json"
        mixinConfig "vanillaful.mixins.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.minecraft_version-$rootProject.forge_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modApi ("earth.terrarium:botarium-forge-$rootProject.minecraft_version:$rootProject.botarium_version") { transitive false }
}

repositories {
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "version", project.version
    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.version, "botarium_version": rootProject.botarium_version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
    }
}